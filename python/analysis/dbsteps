#!/usr/bin/env python3

"""Allows to navigate measurements."""

import argparse
import base64
from urllib.parse import urlparse, urlunparse
import webbrowser
from dnslib import DNSRecord
import json
import os
import re
import sys
import tabulate
from typing import (
    Callable,
    List,
    Optional,
)
import yattag.doc
import yattag.indentation

# Imported to make `input()` better
import readline as _

sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(sys.argv[0]))))

from ooni.dataformat import dblikedecode

from ooni.dataformat.archival import (
    WebstepsAnalysisDNSOrEndpoint,
)

from ooni.dataformat.dblike import (
    DBLikeEntry,
    DBLikeWebstepsTestKeys,
)

from ooni import htmlx

from ooni.tabulatex import Tabular

from ooni.dataformat import dblike

import tempfiledir


def s_command_help():
    """Prints the help screen."""
    print("")
    print("  d<id>")
    print("    decodes the observation with the given <id>")
    print("")
    print("  h")
    print("    prints this help screen")
    print("")
    print("  j")
    print("    prints the full JSON of the selected measurement")
    print("")
    print("  j<id>")
    print("    views the JSON of the observation or analysis with the given <id>")
    print("")
    print("  l")
    print("    equivalent to running in sequence lm, lu, ld, le, la")
    print("")
    print("  la[<id>]")
    print(
        "    lists probe's analysis for the given step <id> or for all steps (if no <id> is specified)"
    )
    print("")
    print("  ld[<id>]")
    print(
        "    lists dns results for the given step <id> or for all steps (if no <id> is specified)"
    )
    print("")
    print("  le[<id>]")
    print(
        "    lists endpoint results for the given step <id> or for all steps (if no <id> is specified)"
    )
    print("")
    print("  lia")
    print('    lists "interesting" analysis')
    print("")
    print("  lm")
    print("    lists the currently-selected measurement")
    print("")
    print("  lu")
    print("    lists urls observations")
    print("")
    print("  q")
    print("    returns to the main environment")
    print("")
    print("  v<id>")
    print("    views the observation or analysis with the given ID")
    print("")


def s_command_d(meas: DBLikeWebstepsTestKeys, command: str):
    """Implements the d command of the s environment."""
    try:
        idx = int(command[1:])
    except ValueError:
        print("s: argument for `d` must be a number")
        return
    try:
        entry = meas.find_entry(idx)
    except KeyError:
        print(f"s: entry {idx} not found")
        return
    print(dblikedecode.entry(entry))


def s_command_j(meas: DBLikeWebstepsTestKeys, command: str):
    """Implements the j command of the s environment."""
    if len(command[1:]) <= 0:
        json.dump(meas.raw(), sys.stdout, indent=4)
        sys.stdout.write("\n")
        return
    try:
        idx = int(command[1:])
    except ValueError:
        print("s: argument for `j` must be a number")
        return
    try:
        entry = meas.find_entry(idx)
    except KeyError:
        print(f"s: entry {idx} not found")
        return
    json.dump(entry.raw(), sys.stdout, indent=4)
    sys.stdout.write("\n")


def s_command_v(meas: DBLikeWebstepsTestKeys, command: str):
    """Implements the v command of the s environment."""
    try:
        idx = int(command[1:])
    except ValueError:
        print("s: argument for `v` must be a number")
        return
    try:
        entry = meas.find_entry(idx)
    except KeyError:
        print(f"s: entry {idx} not found")
        return
    print("")
    print(f"kind: {entry.kind()}")
    print(f"origin: {entry.origin()}")
    print("")
    print(entry.tabular().tabulatex())
    print("")
    print("hint: use `j<id>' to view the corresponding JSON")
    print("")


def s_command_lm(idx: int, meas: DBLikeWebstepsTestKeys, disable_hints: bool = False):
    """Implements the lm command of the s environment."""
    print("")
    print(f"viewing selected measurement {idx}")
    print("")
    print(meas.tabular().tabulatex())
    print("")
    if not disable_hints:
        print("hint: use `lu` to list the URLs measured within this measurement")
        print("hint: use `h' for help")
        print("")


def s_command_lia(meas_idx: int, meas: DBLikeWebstepsTestKeys):
    """Implements the lia command of the s environment."""
    entries: List[DBLikeEntry] = []
    for elem in meas.list_analysis():
        analysis: WebstepsAnalysisDNSOrEndpoint = elem.unwrap()
        if not analysis.flags.tags():
            continue
        entries.append(elem)
    if len(entries) <= 0:
        print("")
        print('no "interesting" analysis to show')
        print("")
        print("hint: use `la<id>' to list all analysis for the URL with <id>")
        print("hint: use `h' for help")
        print("")
        return
    print("")
    print(f'viewing "interesting" analysis for selected measurement {meas_idx}')
    print("")
    print(dblike.entries_to_tabular(entries).tabulatex())
    print("")
    print("hint: use `v<id>' to view the observation or analyis with the given <id>")
    print("hint: use `h' for help")
    print("")


def s_command_ld(
    meas_idx: int,
    meas: DBLikeWebstepsTestKeys,
    command: str,
    disable_hints: bool = False,
):
    """Implements the ld command of the s environment."""
    url_idx: Optional[int] = None
    if len(command[2:]):
        try:
            url_idx = int(command[2:])
        except ValueError:
            print("s: argument for `ld' must be a number")
            return
    entries = meas.list_dns(url_idx)
    if not entries:
        print(f"warning: cannot find dns for URL {url_idx}")
        return
    print("")
    print(
        f"viewing dns for selected measurement {meas_idx} and step {url_idx or 'any'}"
    )
    print("")
    print(dblike.entries_to_tabular(entries).tabulatex())
    print("")
    if not disable_hints:
        print(
            "hint: use `v<id>' to view the observation or analyis with the given <id>"
        )
        print("hint: use `h' for help")
        print("")


def s_command_le(
    meas_idx: int,
    meas: DBLikeWebstepsTestKeys,
    command: str,
    disable_hints: bool = False,
):
    """Implements the le command of the s environment."""
    url_idx: Optional[int] = None
    if len(command[2:]):
        try:
            url_idx = int(command[2:])
        except ValueError:
            print("s: argument for `le' must be a number")
            return
    entries = meas.list_endpoint(url_idx)
    if not entries:
        print(f"warning: cannot find endpoint for URL {url_idx}")
        return
    print("")
    print(
        f"viewing endpoint for selected measurement {meas_idx} and step {url_idx or 'any'}"
    )
    print("")
    print(dblike.entries_to_tabular(entries).tabulatex(sortkey=lambda x: x[5]))
    print("")
    if not disable_hints:
        print(
            "hint: use `v<id>' to view the observation or analyis with the given <id>"
        )
        print("hint: use `h' for help")
        print("")


def s_command_la(
    meas_idx: int,
    meas: DBLikeWebstepsTestKeys,
    command: str,
    disable_hints: bool = False,
):
    """Implements the la command of the s environment."""
    url_idx: Optional[int] = None
    if len(command[2:]):
        try:
            url_idx = int(command[2:])
        except ValueError:
            print("s: argument for `la' must be a number")
            return
    entries = meas.list_analysis(url_idx)
    if not entries:
        print(f"warning: cannot find analysis for URL {url_idx}")
        return
    print("")
    print(
        f"viewing analysis for selected measurement {meas_idx} and step {url_idx or 'any'}"
    )
    print("")
    print(dblike.entries_to_tabular(entries).tabulatex())
    print("")
    if not disable_hints:
        print(
            "hint: use `v<id>' to view the observation or analyis with the given <id>"
        )
        print("hint: use `h' for help")
        print("")


def s_command_lu(idx: int, meas: DBLikeWebstepsTestKeys, disable_hints: bool = False):
    """Implements the lu command of the s environment."""
    print("")
    print(f"viewing the URLs measured as part of selected measurement {idx}")
    print("")
    entries = meas.list_urls()
    print(dblike.entries_to_tabular(entries).tabulatex())
    print("")
    if not disable_hints:
        print(f'hint: use `lia\' to list "interesting" analysis')
        print("hint: use `h' for help")
        print("")


def s_truncate_url(meas: DBLikeWebstepsTestKeys):
    """Returns meas' URL and possibly truncates it."""
    url = meas.url()
    if len(url) > 47:
        url = url[:47] + " ..."
    return url


def s_interactive(idx: int, meas: DBLikeWebstepsTestKeys):
    """The s environment (aka "selected" measurement)."""
    print("")
    print(f"selecting measurement {idx}; entering into the `s' environment...")
    print("")
    print("hint: use `l' to see all the information we have on this measurement")
    print("hint: use `h' for help")
    print("")
    while True:
        command = input(f"🐚🐚🐚 s:{idx} [{s_truncate_url(meas)}]> ")
        if command.startswith("d"):
            s_command_d(meas, command)
            continue
        if command == "h":
            s_command_help()
            continue
        if command.startswith("j"):
            s_command_j(meas, command)
            continue
        if command == "l":
            s_command_lm(idx, meas, disable_hints=True)
            s_command_lu(idx, meas, disable_hints=True)
            s_command_ld(idx, meas, "ld", disable_hints=True)
            s_command_le(idx, meas, "le", disable_hints=True)
            s_command_la(idx, meas, "la", disable_hints=True)
            print("hint: use `lia' to list interesting analyses")
            print("hint: use `h' for help")
            print("")
            continue
        if command.startswith("la"):
            s_command_la(idx, meas, command)
            continue
        if command.startswith("ld"):
            s_command_ld(idx, meas, command)
            continue
        if command.startswith("le"):
            s_command_le(idx, meas, command)
            continue
        if command == "lia":
            s_command_lia(idx, meas)
            continue
        if command == "lm":
            s_command_lm(idx, meas)
            continue
        if command == "lu":
            s_command_lu(idx, meas)
            continue
        if command == "q":
            print("")
            print("leaving the `s' environment...")
            print('hint: use `li\' to list "interesting" measurements')
            print("")
            break
        if command.startswith("v"):
            s_command_v(meas, command)
            continue
        print(f"s: {command}: command not found (try 'h' for help)")


def main_command_help():
    """Implements the `h` command of the main environment."""
    print("")
    print("  #<tagName>:<count>")
    print("    like #<tagName> but shuffles and returns the first <count> entries")
    print("")
    print("  #<tagName>")
    print("    shows all the measurements with the given tag (e.g., `#bogon`)")
    print("")
    print("  b<id>")
    print("    generates HTML webpage for the measurement and shows it in the browser")
    print("")
    print("  ci")
    print("    classifies the failure tags _individually_")
    print("")
    print("  cu")
    print("    classifies the failure tags _per URL_")
    print("")
    print("  h")
    print("    prints this help screen")
    print("")
    print("  j<id>")
    print("    prints the JSON of the measurement with <id>")
    print("")
    print("  l")
    print("    lists measurements")
    print("")
    print("  li")
    print("    lists interesting measurements")
    print("")
    print("  q")
    print("    exits")
    print("")
    print("  s<id>")
    print("    selects the measurement with the given ID")
    print("")


def main_command_j(meas: List[DBLikeWebstepsTestKeys], command: str):
    """Implements the `j` command of the main environment."""
    try:
        idx = int(command[1:])
    except ValueError:
        print("main: argument for `j` must be a number")
        return
    try:
        entry = meas[idx]
    except IndexError:
        print(f"s: entry {idx} not found")
        return
    json.dump(entry.raw(), sys.stdout, indent=4)
    sys.stdout.write("\n")


def main_command_l_or_slash_finish(summary: Tabular):
    """Finishes running an `l` or `/` command in the main environment."""
    if len(summary) <= 0:
        print("")
        print('no "interesting" measurements to show')
        print("")
        print("hint: use `l' to list all measurements")
        print("hint: use `h' for help")
        print("")
        return
    print("")
    print(summary.tabulatex())
    print("")
    print(f"listed {len(summary)} measurements")
    print("")
    print("hint: use `s<id>' to select the measurement with the given <id>")
    print("hint: use `h' for help")
    print("")


def main_command_l_or_slash_filter(
    msmts: List[DBLikeWebstepsTestKeys],
    filter: Callable[[DBLikeWebstepsTestKeys], bool],
) -> Tabular:
    """Filter functionality for either `l` or `/` in the main environment"""
    summary = Tabular()
    for idx, meas in enumerate(msmts):
        if filter(meas):
            summary.appendrow(
                [
                    ("idx", idx),
                    ("url", meas.url()),
                    ("flags", meas.tags()),
                ]
            )
    return summary


def main_command_l(msmts: List[DBLikeWebstepsTestKeys], all: bool):
    """Lists all the available measurements."""

    def filter(meas):
        return all or len(meas.tags()) > 0

    summary = main_command_l_or_slash_filter(msmts, filter)
    main_command_l_or_slash_finish(summary)


def main_command_slash(msmts: List[DBLikeWebstepsTestKeys], command: str):
    """Implements the `/` command of the main environment."""
    pattern = command[1:]
    regex = re.compile(pattern)

    def filter(meas) -> bool:
        return bool(regex.search(meas.url()))

    summary = main_command_l_or_slash_filter(msmts, filter)
    main_command_l_or_slash_finish(summary)


def main_command_s(msmts: List[DBLikeWebstepsTestKeys], command: str):
    """Implements the `s` command of the main environment."""
    try:
        idx = int(command[1:])
    except ValueError:
        print("dbsteps: argument for `s' must be a number")
        return
    try:
        meas = msmts[idx]
    except IndexError:
        print(f"dbsteps: measurement {idx} not found")
        return
    s_interactive(idx, meas)


def main_command_c(msmts: List[DBLikeWebstepsTestKeys], command: str):
    """Implements the `c` command of the main environment."""
    modifier = command[1:]
    if modifier != "i" and modifier != "u":
        print("")
        print("error: the `c' command has two forms: `ci` and `cu'")
        print("")
        print("hint: use `l' to list measurements")
        print("hint: use `h' for help")
        print("")
        return
    tags = {}
    tot = 0
    for meas in msmts:
        if modifier == "i":
            for tag in meas.tags():
                tags.setdefault(tag, 0)
                tags[tag] += 1
                tot += 1
        else:
            v = " ".join(meas.tags())
            tags.setdefault(v, 0)
            tags[v] += 1
            tot += 1
    tagslist = sorted(tags.items(), key=lambda v: v[1], reverse=True)
    tagslist.append(("Total", tot))
    final = []
    if tot <= 0:
        print("")
        print("no blocking detected")
        print("")
        print("hint: use `l' to list measurements")
        print("hint: use `h' for help")
        print("")
        return
    for tag, count in tagslist:
        percentage = f"{((100 *count)/tot):.1f}%"
        final.append(
            (
                tag,
                count,
                percentage,
            )
        )
    print(
        tabulate.tabulate(
            final,
            headers=["tag", "count", "percentage"],
            tablefmt="grid",
            stralign="right",
        )
    )
    print("")
    print("hint: use `#<tagName>' to filter by tag name (e.g., `#bogon`)")
    print("hint: use `h' for help")
    print("")


def main_command_hashtag(msmts: List[DBLikeWebstepsTestKeys], tag: str):
    """Implements the `#` command of the main environment."""
    idx = tag.find(":")
    samplecount = None
    if idx >= 0:
        sample = tag[idx + 1 :]
        tag = tag[:idx]
        try:
            samplecount = int(sample)
        except ValueError:
            print("error: the sample argument must be an integer")
            return
    selected = Tabular()
    for idx, meas in enumerate(msmts):
        if tag in meas.tags():
            selected.appendrow(
                [
                    ("idx", idx),
                    ("url", meas.url()),
                    ("flags", meas.tags()),
                ]
            )
    if samplecount is not None:
        selected.shuffle()
        selected.shrink(samplecount)
    print(selected.tabulatex())
    print("")
    print(f"showing {len(selected)} results matching the selected criteria")
    print("")
    print("hint: use `s<ID>' to select and focus on the measurement with ID <ID>")
    print("hint: use `h' for help")
    print("")


def main_command_b(msmts: List[DBLikeWebstepsTestKeys], command: str):
    """Implements the `b` command of the main environment."""
    try:
        index = int(command[1:])
    except ValueError:
        print("error: the b argument must be an integer")
        return
    try:
        meas = msmts[index]
    except IndexError:
        print("error: no such measurement")
        return
    doc, _, _ = yattag.doc.Doc().tagtext()
    with doc.tag("html"):
        doc.attr(lang="en")
        with doc.tag("title"):
            doc.text("Single websteps measurement")
        with doc.tag("link"):
            doc.attr(href="main.css", rel="stylesheet")
        with doc.tag("body"):
            htmlx.websteps_measurement(doc, meas)
            with doc.tag("script"):
                doc.attr(src="main.js")
    with tempfiledir.new_named_tempfile(
        dir="html", delete=False, suffix=".html"
    ) as filep:
        print("<!DOCTYPE HTML>", file=filep)
        print(yattag.indentation.indent(doc.getvalue()), file=filep)
        fullpath = os.path.abspath(filep.name)
        url = urlunparse(("file", "", fullpath, "", "", ""))
        webbrowser.open(url)


def main_interactive(msmts: List[DBLikeWebstepsTestKeys]):
    """Runs an interactive shell allowing to see measurements."""
    print("")
    print(f"loaded {len(msmts)} measurements; entering the main environment...")
    print("")
    print("hint: use `ci' or `cu' to classify failures")
    print('hint: use `li\' to list "interesting" measurements')
    print("hint: use `h' for help")
    print("")
    while True:
        command = input("🐚🐚🐚 main> ")
        if command.startswith("#"):
            main_command_hashtag(msmts, command)
            continue
        if command.startswith("/"):
            main_command_slash(msmts, command)
            continue
        if command.startswith("b"):
            main_command_b(msmts, command)
            continue
        if command.startswith("c"):
            main_command_c(msmts, command)
            continue
        if command.startswith("j"):
            main_command_j(msmts, command)
            continue
        if command == "h":
            main_command_help()
            continue
        if command == "l" or command == "li":
            main_command_l(msmts, command != "li")
            continue
        if command == "q":
            break
        if command.startswith("s"):
            main_command_s(msmts, command)
            continue
        print(f"dbsteps: {command}: command not found (try 'h' for help)")


def main():
    """Main function"""
    parser = argparse.ArgumentParser(description="Interactively explore measurements.")
    parser.add_argument(
        "file",
        action="store",
        help="specify JSONL file containing measurements",
        nargs=1,
    )
    msmts = dblike.load(parser.parse_args().file[0])
    try:
        main_interactive(msmts)
    except EOFError:
        pass


if __name__ == "__main__":
    main()
