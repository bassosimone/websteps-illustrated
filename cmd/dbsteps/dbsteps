#!/usr/bin/env python3

"""Allows to navigate measurements."""

import argparse
import json
import sys
import tabulate
from typing import Any
from typing import Dict
from typing import List

sys.path.insert(0, ".")

from websteps.websteps import load as websteps_load
from websteps.dblike import MeasurementDB


def jsonl_reader(filepath: str):
    """Reads a JSONL file returning each measurement."""
    with open(filepath, "rb") as filep:
        for line in filep:
            try:
                measurement = json.loads(line)
            except ValueError:
                continue
            else:
                yield measurement


def load(filepath) -> List[MeasurementDB]:
    """Loads measurements from file."""
    out: List[MeasurementDB] = []
    for measurement in jsonl_reader(filepath):
        tk = measurement.get("test_keys")
        if not tk:
            print("warning: missing test_keys")
            continue
        try:
            meas = websteps_load(tk)
        except ValueError as exc:
            print(f"warning: cannot load measurement: {exc}")
            continue
        mdb = MeasurementDB(meas)
        out.append(mdb)
    return out


def print_table(table: List[Dict[str, Any]]):
    """Pretty-prints a table."""
    print(tabulate.tabulate(table, headers="keys", tablefmt="grid"))


def s_command_help():
    """Prints the help screen."""
    print("")
    print("  h")
    print("    prints this help screen")
    print("")
    print("  j<id>")
    print("    views the JSON of the observation or analysis with the given ID")
    print("")
    print("  la<id>")
    print("    lists probe's analysis for the given URL <id>")
    print("")
    print("  lm")
    print("    lists the currently-selected measurement")
    print("")
    print("  lu")
    print("    lists urls observations")
    print("")
    print("  q")
    print("    returns to the main environment")
    print("")
    print("  v<id>")
    print("    views the observation or analysis with the given ID")
    print("")


def s_command_j(meas: MeasurementDB, command: str):
    """Implements the j command of the s environment."""
    try:
        idx = int(command[1:])
    except ValueError:
        print("s: argument for `j` must be a number")
        return
    try:
        entry = meas.find_entry(idx)
    except IndexError:
        print(f"s: entry {idx} not found")
        return
    json.dump(entry.raw(), sys.stdout, indent=4)
    sys.stdout.write("\n")


def s_command_v(meas: MeasurementDB, command: str):
    """Implements the v command of the s environment."""
    try:
        idx = int(command[1:])
    except ValueError:
        print("s: argument for `v` must be a number")
        return
    try:
        entry = meas.find_entry(idx)
    except KeyError:
        print(f"s: entry {idx} not found")
        return
    print("")
    print(f"kind: {entry.kind()}")
    print(f"origin: {entry.origin()}")
    print("")
    print_table([entry.dict()])
    print("")
    print("hint: use `j<id>' to view the corresponding JSON")
    print("")


def s_command_lm(idx: int, meas: MeasurementDB):
    """Implements the lm command of the s environment."""
    print("")
    print(f"viewing selected measurement {idx}")
    print("")
    print_table([{"idx": idx, "url": meas.url(), "flags": meas.tags()}])
    print("")
    print("hint: use `lu` to list the URLs measured within this measurement")
    print("hint: use `h' for help")
    print("")


def s_command_la(meas_idx: int, meas: MeasurementDB, command: str):
    """Implements the la command of the s environment."""
    try:
        url_idx = int(command[2:])
    except ValueError:
        print("s: argument for `la' must be a number")
        return
    entries = [elem.dict() for elem in meas.list_analysis(url_idx)]
    if not entries:
        print(f"warning: cannot find analysis for URL {url_idx}")
        return
    print("")
    print(f"viewing analysis for selected measurement {meas_idx} and URL {url_idx}")
    print("")
    print_table(entries)
    print("")
    print("hint: use `v<id>' to view the observation or analyis with the given <id>")
    print("hint: use `h' for help")
    print("")


def s_command_lu(idx: int, meas: MeasurementDB):
    """Implements the lu command of the s environment."""
    print("")
    print(f"viewing the URLs measured as part of selected measurement {idx}")
    print("")
    print_table([elem.dict() for elem in meas.list_urls()])
    print("")
    print("hint: use `la<id>` to list analysis for the given URL <id>")
    print("hint: use `h' for help")
    print("")


def s_interactive(idx: int, meas: MeasurementDB):
    """The s environment (aka "selected" measurement)."""
    print("")
    print(f"selecting measurement {idx}; entering into the `s' environment...")
    print("")
    print("hint: use `lm' to print the selected measurement")
    print("hint: use `h' for help")
    print("")
    while True:
        command = input(f"s:{idx}> ")
        if command == "q":
            break
        if command == "h":
            s_command_help()
            continue
        if command.startswith("j"):
            s_command_j(meas, command)
            continue
        if command.startswith("la"):
            s_command_la(idx, meas, command)
            continue
        if command == "lm":
            s_command_lm(idx, meas)
            continue
        if command == "lu":
            s_command_lu(idx, meas)
            continue
        if command.startswith("v"):
            s_command_v(meas, command)
            continue
        print(f"s: {command}: command not found (try 'h' for help)")


def main_command_help():
    """Prints the help screen."""
    print("")
    print("  h")
    print("    prints this help screen")
    print("")
    print("  l")
    print("    lists measurements")
    print("")
    print("  q")
    print("    exits")
    print("")
    print("  s<id>")
    print("    selects the measurement with the given ID")
    print("")


def main_command_l(msmts: List[MeasurementDB]):
    """Lists all the available measurements."""
    summary: List[Dict[str, Any]] = []
    for idx, meas in enumerate(msmts):
        summary.append({"idx": idx, "url": meas.url(), "flags": meas.tags()})
    print("")
    print_table(summary)
    print("")
    print("hint: use `s<id>' to select the measurement with the given <id>")
    print("hint: use `h' for help")
    print("")


def main_command_s(msmts: List[MeasurementDB], command: str):
    """Implements the s command of the CLI."""
    try:
        idx = int(command[1:])
    except ValueError:
        print("dbsteps: argument for `s' must be a number")
        return
    try:
        meas = msmts[idx]
    except IndexError:
        print(f"dbsteps: measurement {idx} not found")
        return
    s_interactive(idx, meas)


def main_interactive(msmts: List[MeasurementDB]):
    """Runs an interactive shell allowing to see measurements."""
    print("")
    print(f"loaded {len(msmts)} measurements; entering the main environment...")
    print("")
    print("hint: use `l' to list measurements")
    print("hint: use `h' for help")
    print("")
    while True:
        command = input("main> ")
        if command == "q":
            break
        if command == "h":
            main_command_help()
            continue
        if command == "l":
            main_command_l(msmts)
            continue
        if command.startswith("s"):
            main_command_s(msmts, command)
            continue
        print(f"dbsteps: {command}: command not found (try 'h' for help)")


def main():
    """Main function"""
    parser = argparse.ArgumentParser(description="Process some integers.")
    parser.add_argument(
        "-f",
        dest="file",
        action="store",
        help="specify JSONL file containing measurements",
        required=True,
    )
    args = parser.parse_args()
    msmts = load(args.file)
    try:
        main_interactive(msmts)
    except EOFError:
        pass


if __name__ == "__main__":
    main()
